/*
Author: Lu Ou, Mike Hunter
Date: 2015-07-30
Filename: estimation_nlopt.c
Purpose: Obtain parameters estimates by minimizing the negative log likelihood function
Run with
   ./runnlopt_onair.sh
   type in the command: gsl-config --cflags to find the compiler flag
   type in the command: gsl-config --libs to find the flag
Note
  You must have NLOpt installed on your machine to run this.
  Installing NLOpt basically entailed
    1.  Download the tar.gz
    2.  Extract the tar bar
    3.  cd into trunk of folder
    4.  ./configure
    5.  make
    6.  sudo make install
  You may also need to change -I/dir and -L/dir to the locations
    where NLOpt was installed.
*/

#include <math.h>/*sqrt(double)*/
#include <stdio.h>
#include <string.h>
#include <nlopt.h>
#include "headers/math_function.h"
#include "headers/cdaekf.h"
#include "headers/data_structure.h"
#include "headers/brekfis.h"
#include "headers/adaodesolver.h"
#include "headers/model.h"
#include <gsl/gsl_blas.h>
#include <gsl/gsl_linalg.h>
#include <gsl/gsl_vector.h>
#include <gsl/gsl_matrix.h>
#include "wrappernegloglike.h"
#include "numeric_derivatives.h"
#include <R.h>
#include <Rinternals.h>
#include <Rmath.h>



int opt_nlopt(void *my_func_data,size_t num_func_param,double *ub,double *lb,double *minf,double *fittedpar,gsl_matrix *Hessian_mat,gsl_matrix *inv_Hessian_mat,double x_tol)
{
    printf("Optimize function called.\n");
    nlopt_opt opt;

    
	
    /*opt = nlopt_create(NLOPT_LD_MMA, 2); */
    opt = nlopt_create(NLOPT_LD_SLSQP, num_func_param); /* algorithm and dimensionality */
    nlopt_set_upper_bounds(opt, ub);
    nlopt_set_lower_bounds(opt, lb);
    nlopt_set_min_objective(opt, myfunc_wrapper,my_func_data);	
    nlopt_set_xtol_rel(opt, x_tol);
	
    int status=nlopt_optimize(opt, fittedpar, minf);
    if ( status< 0) {
		/*printf("nlopt failed!\n");*/
    }else{
		/*printf("found minimum at \n");
		print_array(fittedpar,num_func_param);
		printf("\n f = %0.10g\n", *minf);*/
		hessianR(fittedpar,my_func_data,function_neg_log_like, *minf, Hessian_mat);/*information matrix*/
		mathfunction_inv_matrix(Hessian_mat, inv_Hessian_mat);/*variance*/
		/*printf("The hessian matrix is \n");
		print_matrix(Hessian_mat);
		printf("\n");
		printf("The inverse hessian matrix is \n");
		print_matrix(inv_Hessian_mat);
		printf("\n");*/
	}

	
	nlopt_destroy(opt);

	

	/*printf("Done.\n");*/
	return status;
}

/* get the list element named str, or return NULL */
SEXP getListElement(SEXP list, const char *str)
{
    SEXP elmt = R_NilValue, names = getAttrib(list, R_NamesSymbol);
    size_t i;
    for (i = 0; i < length(list); i++)
	if(strcmp(CHAR(STRING_ELT(names, i)), str) == 0) {
	   elmt = VECTOR_ELT(list, i);
	   break;
	}
    return elmt;
}
/**
 * The getway function for the R interface
 * @param model_list is a list in R of all model specifications.
 * @param paramvec is a vector in R of the parameter starting values
 * @param ubvec is a vector in R of the upper bounds of search region
 * @param lbvec is a vecotr in R of the lower bounds of the search region
 */
SEXP main_R(SEXP model_list,SEXP paramvec,SEXP ubvec,SEXP lbvec)
{
    size_t index;

    /** =======================Interface : Start to Set up the data and the model========================= **/
    
    size_t num_func_param=length(paramvec);
    /*printf("num_func_param= %lu",num_func_param);*/
    /*printf("\n");*/
    double params[num_func_param];
    	memcpy(params,REAL(paramvec),sizeof(params));  
    /*printf("Array paramvec allocated.\n");*/
    /*print_array(params,num_func_param);*/
    /*printf("\n");*/
    double fittedpar[num_func_param];
    	memcpy(fittedpar, params,sizeof(params));
    /*printf("Array paramvec copied.\n");*/
    /*print_array(fittedpar,num_func_param);*/
    /*printf("\n");*/
    double ub[num_func_param];
    double lb[num_func_param];
    	memcpy(ub,REAL(ubvec),sizeof(ub));
    	memcpy(lb,REAL(lbvec),sizeof(lb));
    /*printf("Arrays allocated.\n");*/
    /*double ub[6] = {4, 4, 4, 4, 4, 4};
    double lb[6] = {-4,-4,-4,-4,-12, -12}; */
    /*double params[]={log(1),log(2),0,0,-10,-10};*//* some initial guess*/
    /*log(1.2)=0.1823216,log(1.8)=0.5877867,-0.5,-0.5,log(0.0001)=-9.21034,log(0.0001)=-9.21034*//* lower bounds */
    
    static Data_and_Model data_model;

     
    /* From the SEXP called model_list, get the list element named "num_sbj" */
    data_model.pc.num_sbj=(size_t) *REAL(getListElement(model_list, "num_sbj"));/*number of subjects*/
    
    printf("num_sbj: %lu\n",data_model.pc.num_sbj);
    data_model.pc.dim_latent_var=4;/*number of latent variables*/
    data_model.pc.dim_obs_var=2;/*number of observed variables*/
    data_model.pc.dim_co_variate=1; /*number of covariates*/
    data_model.pc.num_func_param=6; /*number of function parameters*/
    data_model.pc.num_regime=1;/*number of regimes*/

    /*function specifications*/
    data_model.pc.func_measure=function_measurement;
    data_model.pc.func_dF_dx=function_dF_dx;
    data_model.pc.func_jacobdynamic=function_jacobdynamic;
    data_model.pc.func_dx_dt=function_dx_dt;
    data_model.pc.func_dP_dt=function_dP_dt;
    data_model.pc.func_initial_condition=function_initial_condition;
    data_model.pc.func_regime_switch=function_regime_switch;
    data_model.pc.func_noise_cov=function_noise_cov;
    data_model.pc.isnegloglikeweightedbyT=false;
    data_model.pc.second_order=false;/*true;*/
    data_model.pc.adaodesolver=false;/*true: use adapative ode solver; false: RK4*/
    if (data_model.pc.adaodesolver){
        data_model.pc.func_dynam=function_dynam_ada;
    }else{
        data_model.pc.func_dynam=rk4_odesolver;
    }

    data_model.pc.index_sbj=(size_t *)malloc((data_model.pc.num_sbj+1)*sizeof(size_t *));    
    size_t i;

    /*specify the start position for each subject: User always need to provide a txt file called tStart.txt*/
    /*for example, 500 time points for each sbj, specify 0 500 1000 ... 10000 also the end point*/
    /*n subjects -> n+1 indices*/   
    FILE *file_tstart=fopen("../data/tStartPANAsim.txt","r");
    if (file_tstart == NULL) {
        perror("fopen");
        printf("-1");
    }

    int errorcheck_data;
    for(i=0;i<=data_model.pc.num_sbj;i++){
           errorcheck_data=fscanf(file_tstart,"%lu",data_model.pc.index_sbj+i);
            if (errorcheck_data == EOF) {
                if (ferror(file_tstart)) {
                    perror("fscanf");
                }
                else {
                    fprintf(stderr, "Error: fscanf reached end of file, no matching characters, no matching failure\n");
                }
                printf("-1");
            }
            else if (errorcheck_data != 1) {
                fprintf(stderr, "Error: fscanf successfully matched and assigned %i input items\n", errorcheck_data);
                printf("-1");
            }
        }
    if (fclose(file_tstart) == EOF) {
        perror("fclose");
        printf("-1");
    }
    
    data_model.pc.total_obs=*(data_model.pc.index_sbj+data_model.pc.num_sbj);/*total observations for all subjects*/
    printf("total_obs: %lu\n",data_model.pc.total_obs);
    
        /** read in the data**/
    
    /*Sukruth Note here: Allocate the gsl_vectors */
    data_model.y=(gsl_vector **)malloc(data_model.pc.total_obs*sizeof(gsl_vector *));
    for(index=0; index<data_model.pc.total_obs; index++){
        data_model.y[index]=gsl_vector_calloc(data_model.pc.dim_obs_var);/*y[t] corresponds to y(),which is a gsl_vector; loop through total_obj*/
        /*Sukruth Note this example:
         gsl_vector_set(data_model.y[index],0, a double value);
         a pointer  
         memcpy(dest pr, cp pr, size);
         the pointer: data_model.y[index]->data
         */
    }
    

    data_model.co_variate=(gsl_vector **)malloc(data_model.pc.total_obs*sizeof(gsl_vector *));
    for(index=0; index<data_model.pc.total_obs; index++)
        data_model.co_variate[index]=gsl_vector_calloc(data_model.pc.dim_co_variate);

    data_model.y_time=(double *)malloc(data_model.pc.total_obs*sizeof(double));


    size_t t;

    FILE *file_data=fopen("../data/dataPANAsim.txt","r");
    if (file_data == NULL) {
        perror("fopen");
    }

    int errorcheck_tstart;
    
    for(t=0;t<data_model.pc.total_obs;t++){
        errorcheck_tstart=0;
        errorcheck_tstart+=fscanf(file_data,"%*lu %lf",data_model.y_time+t);
        for(index=0;index<data_model.pc.dim_obs_var;index++){errorcheck_tstart+=fscanf(file_data," %lf",data_model.y[t]->data+index);}
        for(index=0;index<data_model.pc.dim_co_variate;index++){errorcheck_tstart+=fscanf(file_data," %lf",data_model.co_variate[t]->data+index);}
        
        if (errorcheck_tstart == EOF) {
            if (ferror(file_data)) {
                perror("fscanf");
            }
            else {
                fprintf(stderr, "Error: fscanf reached end of file, no matching characters, no matching failure\n");
            }
        }
        else if (errorcheck_tstart != (data_model.pc.dim_obs_var+data_model.pc.dim_co_variate+1)) {
            fprintf(stderr, "Error: fscanf successfully matched and assigned %i input items\n", errorcheck_tstart);
        }
        
    }
    if (fclose(file_data) == EOF) {
        perror("fclose");
    }


    printf("In main_R:\n");
    print_vector(data_model.y[0]);
    printf("\n"); 
    print_vector(data_model.co_variate[0]);
    printf("\n");
    printf("y_time_1 is %lf\n",data_model.y_time[0]);
    
    /** =======================Interface: Model and data set up========================= **/
     
    /** =================Optimization: start======================**/	
    
    double minf; /* the minimum objective value, upon return */
	
    gsl_matrix *Hessian_mat=gsl_matrix_calloc(num_func_param,num_func_param);
    gsl_matrix *inv_Hessian_mat=gsl_matrix_calloc(num_func_param,num_func_param);
	
	if (opt_nlopt(&data_model,num_func_param,ub,lb,&minf,fittedpar,Hessian_mat,inv_Hessian_mat,1e-7) < 0) {
		/*printf("nlopt failed!\n");*/
	}
	else {
		/*printf("found minimum at \n");
		print_array(fittedpar,num_func_param);
		printf("\n f = %0.10g\n", minf);*/
		printf("The hessian matrix is \n");
		print_matrix(Hessian_mat);
		printf("\n");
		printf("The inverse hessian matrix is \n");
		print_matrix(inv_Hessian_mat);
		printf("\n");
	}
	
	
	/*printf("Optimization done.\n");*/
    /** =================Optimization: done======================**/
	
    /** =================Interface: SEXP Output====================== **/
    SEXP fittedout=PROTECT(allocVector(REALSXP,num_func_param));
	/*printf("fittedout created.\n");*/
	memcpy(REAL(fittedout),fittedpar,sizeof(fittedpar));
	/*printf("fittedout copied.\n");
	print_array(REAL(fittedout),num_func_param);
	printf("\n");*/
	
	/*printf("Done.\n");*/
    /** =================Interface: Output done====================== **/
    
    /** =================Free Allocated space====================== **/
    UNPROTECT(1);/*unprotect 1 object*/
    
    free(data_model.pc.index_sbj);
    
    for(index=0; index<data_model.pc.total_obs; index++){
    gsl_vector_free(data_model.y[index]);}
    free(data_model.y);

    for(index=0; index<data_model.pc.total_obs; index++){
        gsl_vector_free(data_model.co_variate[index]);
    }
    free(data_model.co_variate);


    free(data_model.y_time);
    
    gsl_matrix_free(Hessian_mat);
    gsl_matrix_free(inv_Hessian_mat);
    
    return fittedout;
}




